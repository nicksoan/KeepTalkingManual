@page "/wires3"
@using KeepTalkingManual.Lib.Enums
@using KeepTalkingManual.Lib.Models
@using KeepTalkingManual.Lib.HelperFunctions
@using Components
@using KeepTalkingManual.Lib.Services

@inject WireService wireService

@rendermode InteractiveServer

Count: @wireService.SelectedWires.Count().ToString()
<div class="container">
    <div class="row">
        <div class="col-md-12 mb-12">
            <div class="card h-100">
                <div class="card-body">
                    @if (wireService.WireModule != null)
                    {
                        if (wireService.WireModule.Instructions.Any())
                        {
                            <KeepTalkingManual.Components.Components.InstructionsList Instructions="@wireService.WireModule.Instructions" />
                        }
                    }
                </div>
            </div>
        </div>
    </div>

    <div class="row">

        <KeepTalkingManual.Components.Components.UpdateWires />

        @* <p>Select wires in the order shown, from top to bottom.</p>
        <div class="col-md-9 mb-9">
        <div class="card h-100">
        <input type="button"
        value="Reset"
        @onclick="() => ClearWireSelection()" />

        <label for="txtSerialNumber" class="form-text">SerialNumber</label>
        <input type="text" id="txtSerialNumber" class="form-text" @bind="serialNumber" @bind:event="oninput" @onkeyup="OnSerialNumberKeyup" placeholder="Enter Serial Number" />

        @foreach (var wire in Enum.GetValues<choices_WireColour>())
        {
        <input type="button"
        value="@wire.ToString()"
        class="@GetStyle.GetCheckboxStyle(wire) button"
        @onclick="() => UpdateWireList(wire)" />
        }
        </div>
        </div> *@
        <div class="col-md-3 mb-3">
            <KeepTalkingManual.Components.Components.ShowSelectedWires SelectedWires="wireService.SelectedWires" />
        </div>
    </div>
</div>

@code {

    //private List<choices_WireColour> selectedWires = new List<choices_WireColour>();
    //private choices_WireColour currentWireColour;
    //private string serialNumber;

    protected override void OnInitialized()
    {

    }

    // private void UpdateWireList(choices_WireColour wireColour)
    // {
    //     wireService.UpdateWireList(wireColour);
    // }

    // private void ClearWireSelection()
    // {
    //     wireService.ClearWireSelection();
    // }    // private void UpdateWireList(choices_WireColour wireColour)
    // {
    //     wireService.UpdateWireList(wireColour);
    // }

    // private void ClearWireSelection()
    // {
    //     wireService.ClearWireSelection();
    // }

    // private void OnSerialNumberKeyup(KeyboardEventArgs e)
    // {
    //     wireService.OnSerialNumberKeyup(serialNumber);
    // }


}